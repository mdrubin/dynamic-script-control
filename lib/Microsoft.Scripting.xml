<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Scripting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Scripting.Math.MathResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitByte">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into byte.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitChar">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into char.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitDecimal">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into decimal.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitInt">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into int.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitLong">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into long.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitSByte">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into sbyte.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitShort">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into short.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitUInt">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into uint.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitULong">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into ulong.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.BigIntWontFitUShort">
            <summary>
              Looks up a localized string similar to big integer won&apos;t fit into ushort.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.ComplexDivizionByZero">
            <summary>
              Looks up a localized string similar to complex division by zero.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.ExpectedInteger">
            <summary>
              Looks up a localized string similar to expected integer.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.FormatNotImplemented">
            <summary>
              Looks up a localized string similar to format not implemented.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.InvalidArgument">
            <summary>
              Looks up a localized string similar to invalid argument.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.NonNegativePower">
            <summary>
              Looks up a localized string similar to power must be &gt;= 0.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.RadixGreaterThan36">
            <summary>
              Looks up a localized string similar to radix must be &lt;= 36.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.MathResources.RadixLessThan2">
            <summary>
              Looks up a localized string similar to radix must be &gt;= 2.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.Parse(System.String[])">
            <exception cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException">On error.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.DefaultOptionsParser.ParseArgument(System.String)">
            <exception cref="T:System.Exception">On error.</exception>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptSource">
            <summary>
            Hosting counterpart for <see cref="P:Microsoft.Scripting.Hosting.ScriptSource.SourceUnit"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile">
            <summary>
            Compile the ScriptSource into CompileCode object that can be executed 
            repeatedly in its default scope or in other scopes without having to recompile the code.
            </summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">Code cannot be compiled.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.Hosting.ErrorListener)">
            <remarks>
            Errors are reported to the specified listener. 
            Returns <c>null</c> if the parser cannot compile the code due to errors.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.CompilerOptions)">
            <remarks>
            Errors are reported to the specified listener. 
            Returns <c>null</c> if the parser cannot compile the code due to error(s).
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.Hosting.ErrorListener)">
            <remarks>
            Errors are reported to the specified listener. 
            Returns <c>null</c> if the parser cannot compile the code due to error(s).
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute">
            <summary>
            Execute the ScriptScope in a new scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Execute the ScriptScope.
            Returns an object that is the resulting value of running the code.  
            
            When the ScriptSource is a file or statement, the engine decides what is 
            an appropriate value to return.  Some languages return the value produced 
            by the last expression or statement, but languages that are not expression 
            based may return null.
            </summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">Code cannot be compiled.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute``1(Microsoft.Scripting.Hosting.ScriptScope)">
            <remarks>
            Converts the result of execution to specified type using language specific conversions.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Execute the code in the specified ScriptScope and return a result.
            
            ExecuteAndWrap returns an ObjectHandle wrapping the resulting value 
            of running the code.  
            
            When the ScriptSource is a file or statement, the engine decides what is 
            an appropriate value to return.  Some languages return the value produced 
            by the last expression or statement, but languages that are not expression 
            based may return null.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteProgram">
            <summary>
            Runs a specified code as if it was a program launched from OS command shell. 
            and returns a process exit code indicating the success or error condition 
            of executing the code.
            
            Exact behavior depends on the language. Some languages have a dedicated "exit" exception that 
            carries the exit code, in which case the exception is cought and the exit code is returned.
            The default behavior returns the result of program's execution converted to an integer 
            using a langauge specific conversion.
            </summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">Code cannot be compiled.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCodeLines(System.Int32,System.Int32)">
            <summary>
            Reads specified range of lines (or less) from the source unit. 
            Line numbers starts with 1.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetSymbolDocument(System.Int32)">
            <summary>
            Returns null if unknown/undefined.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptSource.Path">
            <summary>
            Identification of the source unit. Assigned by the host. 
            The format and semantics is host dependent (could be a path on file system or URL).
            <c>null</c> for anonymous script source.
            Cannot be an empty string.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LambdaBuilder">
            <summary>
            The builder for creating the LambdaExpression node.
            
            Since the nodes require that parameters and variables are created
            before hand and then passed to the factories creating LambdaExpression
            this builder keeps track of the different pieces and at the end creates
            the LambdaExpression.
            
            TODO: This has some functionality related to CodeContext that should be
            removed, in favor of languages handling their own local scopes
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateParameter(System.String,System.Type)">
            <summary>
            Creates a parameter on the lambda with a given name and type.
            
            Parameters maintain the order in which they are created,
            however custom ordering is possible via direct access to
            Parameters collection.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateHiddenParameter(System.String,System.Type)">
            <summary>
            Creates a hidden parameter on the lambda with a given name and type.
            
            Parameters maintain the order in which they are created,
            however custom ordering is possible via direct access to
            Parameters collection.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateParamsArray(System.String,System.Type)">
            <summary>
            Creates a params array argument on the labmda.
            
            The params array argument is added to the signature immediately. Before the lambda is
            created, the builder validates that it is still the last (since the caller can modify
            the order of parameters explicitly by maniuplating the parameter list)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateGlobalVariable(System.String,System.Type)">
            <summary>
            Creates a global variable with specified name and type.
            TODO: remove
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateLocalVariable(System.String,System.Type)">
            <summary>
            Creates a local variable with specified name and type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateTemporaryVariable(System.String,System.Type)">
            <summary>
            Creates a temporary variable with specified name and type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Local(System.Type,System.String)">
            <summary>
            Creates a local variable with specified name and type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Temporary(System.Type,System.String)">
            <summary>
            Creates a temporary variable with specified name and type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.AddTemp(Microsoft.Scripting.Ast.VariableExpression)">
            <summary>
            Adds the temporary variable to the list of variables maintained
            by the builder. This is useful in cases where the variable is
            created outside of the builder.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.MakeLambda(System.Type)">
            <summary>
            Creates the LambdaExpression from the builder.
            After this operation, the builder can no longer be used to create other instances.
            </summary>
            <param name="lambdaType">Desired type of the lambda. </param>
            <returns>New LambdaExpression instance.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.MakeLambda">
            <summary>
            Creates the LambdaExpression from the builder.
            After this operation, the builder can no longer be used to create other instances.
            </summary>
            <returns>New LambdaExpression instance.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.MakeGenerator(System.Type)">
            <summary>
            Creates the generator LambdaExpression from the builder.
            After this operation, the builder can no longer be used to create other instances.
            </summary>
            <returns>New LambdaExpression instance.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Validate">
            <summary>
            Validates that the builder has enough information to create the lambda.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Save(Microsoft.Scripting.Ast.VariableExpression)">
            <summary>
            Saves local/global/temporary variable into locals, creating the list if not yet created.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Save(Microsoft.Scripting.Ast.ParameterExpression)">
            <summary>
            Saves parameter into parmaters, creating the list if not yet created.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Annotations">
            <summary>
            Annotations for the lambda being built
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Name">
            <summary>
            The name of the lambda.
            Currently anonymous/unnamed lambdas are not allowed.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.ReturnType">
            <summary>
            Return type of the lambda being created.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.ScopeFactory">
            <summary>
            Optional factory method used for CodeContext instantiation.
            Factory must have signature compatible with: CodeContext Factory(ILocalVariables, CodeContext, bool)
            TODO: remove !!!
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Locals">
            <summary>
            List of lambda's local variables for direct manipulation.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters">
            <summary>
            List of lambda's parameters for direct manipulation
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.ParamsArray">
            <summary>
            The params array argument, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Body">
            <summary>
            The body of the lambda. This must be non-null.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Dictionary">
            <summary>
            The generated lambda should have dictionary of locals
            instead of allocating them directly on the CLR stack.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Global">
            <summary>
            The resulting lambda should be marked as global.
            TODO: remove !!!
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Visible">
            <summary>
            The scope is visible (default). Invisible if false.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.Utils">
            <summary>
            Factory methods
            </summary>
            <summary>
            Factory methods.
            </summary>
            <summary>
            Factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Lambda(System.Type,System.String,Microsoft.Scripting.SourceSpan)">
            <summary>
            Creates new instance of the LambdaBuilder with specified name, return type and a source span.
            </summary>
            <param name="returnType">Return type of the lambda being built.</param>
            <param name="name">Name of the lambda being built.</param>
            <param name="span">SourceSpan for the lambda being built.</param>
            <returns>New instance of the </returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Lambda(System.Type,System.String)">
            <summary>
            Creates new instnace of the LambdaBuilder with specified name and a return type.
            </summary>
            <param name="returnType">Return type of the lambda being built.</param>
            <param name="name">Name for the lambda being built.</param>
            <returns>new LambdaBuilder instance</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Coalesce(Microsoft.Scripting.Ast.Expression,Microsoft.Scripting.Ast.Expression,Microsoft.Scripting.Ast.VariableExpression@)">
            <summary>
            Null coalescing expression
            {result} ::= ((tmp = {_left}) == null) ? {right} : tmp
            '??' operator in C#.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceTrue(Microsoft.Scripting.Ast.Expression,Microsoft.Scripting.Ast.Expression,System.Reflection.MethodInfo,Microsoft.Scripting.Ast.VariableExpression@)">
            <summary>
            True coalescing expression.
            {result} ::= IsTrue(tmp = {left}) ? {right} : tmp
            Generalized AND semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceFalse(Microsoft.Scripting.Ast.Expression,Microsoft.Scripting.Ast.Expression,System.Reflection.MethodInfo,Microsoft.Scripting.Ast.VariableExpression@)">
            <summary>
            False coalescing expression.
            {result} ::= IsTrue(tmp = {left}) ? tmp : {right}
            Generalized OR semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceTrue(Microsoft.Scripting.Ast.LambdaBuilder,Microsoft.Scripting.Ast.Expression,Microsoft.Scripting.Ast.Expression,System.Reflection.MethodInfo)">
            <summary>
            True coalescing expression.
            {result} ::= IsTrue(tmp = {left}) ? {right} : tmp
            Generalized AND semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceFalse(Microsoft.Scripting.Ast.LambdaBuilder,Microsoft.Scripting.Ast.Expression,Microsoft.Scripting.Ast.Expression,System.Reflection.MethodInfo)">
            <summary>
            False coalescing expression.
            {result} ::= IsTrue(tmp = {left}) ? tmp : {right}
            Generalized OR semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.WeakConstant(System.Object)">
            <summary>
            Wraps the given value in a WeakReference and returns a tree that will retrieve
            the value from the WeakReference.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Block(Microsoft.Scripting.SourceSpan,System.Collections.Generic.IEnumerable{Microsoft.Scripting.Ast.Expression})">
            <summary>
            Creates a list of expressions whose value is the value of the last expression.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Comma(Microsoft.Scripting.SourceSpan,System.Collections.Generic.IEnumerable{Microsoft.Scripting.Ast.Expression})">
            <summary>
            Creates a list of expressions whose value is the value of the last expression.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberBinderHelper`2.AddToBody(Microsoft.Scripting.Ast.Expression)">
            <summary>
            Use this method to extend the Body.  It will create BlockStatements as needed.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberBinderHelper`2.Instance">
            <summary> Gets the Expression that represents the instance we're looking up </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberBinderHelper`2.StringName">
            <summary> helper to grab the name of the member we're looking up as a string </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberBinderHelper`2.Body">
            <summary>
            There is no setter on Body.  Use AddToBody to extend it instead.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DeleteMemberBinderHelper`1.MakeOperatorGetMemberBody(System.Type,System.String)">
            <summary> if a member-injector is defined-on or registered-for this type call it </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ValueArray`1">
            <summary>
            Represents an array that has value equality.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpretation.Interpreter">
            <summary>
            Interpreter partial class. This part contains interpretation code for lambdas.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.Interpreter.InterpretLambda(Microsoft.Scripting.Interpretation.InterpreterState,Microsoft.Scripting.Ast.LambdaExpression,System.Object[],System.Object[])">
            <summary>
            Called by the code:LambdaInvoker.Invoke from the delegate generated below by
            code:GetDelegateForInterpreter.
            
            This method must repackage arguments to match the lambdas signature, which
            may mean repackaging the parameter arrays.
            
            Input are two arrays - regular arguments passed into the generated delegate,
            and (if the delegate had params array), the parameter array, separately.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.Interpreter.GetDelegateForInterpreter(Microsoft.Scripting.Interpretation.InterpreterState,Microsoft.Scripting.Ast.LambdaExpression)">
            <summary>
            Gets the delegate associated with the LambdaExpression.
            Either it uses cached MethodInfo and creates delegate from it, or it will generate
            completely new dynamic method, store it in a cache and use it to create the delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.Interpreter.CreateDelegateForInterpreter(Microsoft.Scripting.Ast.LambdaExpression,System.Type)">
            <summary>
            The core of the interpreter, calling back onto itself via delegates.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.Interpreter.InterpretAndCheckFlow(Microsoft.Scripting.Interpretation.InterpreterState,Microsoft.Scripting.Ast.Expression,System.Object@)">
            <summary>
            Evaluates expression and checks it for ControlFlow. If it is control flow, returns true,
            otherwise returns false.
            </summary>
            <param name="state"></param>
            <param name="node"></param>
            <param name="result">Result of the evaluation</param>
            <returns>true if control flow, false if not</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.Interpreter.InterpretAndCheckYield(Microsoft.Scripting.Interpretation.InterpreterState,Microsoft.Scripting.Ast.Expression,System.Object@)">
            <summary>
            Evaluates an expression and checks to see if the ControlFlow is NextForYield.  If it is then we are currently
            searching for the next yield and we need to execute any additional nodes in a larger compound node.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.Interpreter.InterpretLabeledStatement(Microsoft.Scripting.Interpretation.InterpreterState,Microsoft.Scripting.Ast.Expression)">
            <summary>
            Labeled statement makes break/continue go to the end of the contained expression.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DelegateCallBinder">
            <summary>
            Call site binder used by the DelegateSignatureInfo to call IDynamicObject
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptEngine">
            <summary>
            Represents a language in Hosting API. 
            Hosting API counterpart for <see cref="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateOperations">
            <summary>
            Returns a new ObjectOperations object.  See the Operations property for why you might want to call this.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateOperations(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Returns a new ObjectOperations object that inherits any semantics particular to the provided ScriptScope.  
            
            See the Operations property for why you might want to call this.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetScope(System.String)">
            <summary>
            This method returns the ScriptScope in which a ScriptSource of given path was executed.  
            
            The ScriptSource.Path property is the key to finding the ScriptScope.  Hosts need 
            to make sure they create a ScriptSource and set its Path property appropriately.
            
            GetScope is primarily useful for tools that need to map files to their execution scopes. For example, 
            an editor and interpreter tool might run a file Foo that imports or requires a file Bar.  
            
            The editor's user might later open the file Bar and want to execute expressions in its context.  
            The tool would need to find Bar's ScriptScope for setting the appropriate context in its interpreter window. 
            This method helps with this scenario.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String)">
            <summary>
            Return a ScriptSource object from string contents with the current engine as the language binding.
            
            The default SourceCodeKind is Expression.
            
            The ScriptSource's Path property defaults to <c>null</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Return a ScriptSource object from string contents with the current engine as the language binding.
            
            The ScriptSource's Path property defaults to <c>null</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,System.String)">
            <summary>
            Return a ScriptSource object from string contents with the current engine as the language binding.
            
            The default SourceCodeKind is Expression.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Return a ScriptSource object from string contents.  These are helpers for creating ScriptSources' with the right language binding.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String)">
            <summary>
            Return a ScriptSource object from file contents with the current engine as the language binding.  
            
            The path's extension does NOT have to be in ScriptRuntime.GetRegisteredFileExtensions 
            or map to this language engine with ScriptRuntime.GetEngineByFileExtension.
            
            The default SourceCodeKind is File.
            
            The ScriptSource's Path property will be the path argument.
            
            The encoding defaults to System.Text.Encoding.Default.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String,System.Text.Encoding)">
            <summary>
            Return a ScriptSource object from file contents with the current engine as the language binding.  
            
            The path's extension does NOT have to be in ScriptRuntime.GetRegisteredFileExtensions 
            or map to this language engine with ScriptRuntime.GetEngineByFileExtension.
            
            The default SourceCodeKind is File.
            
            The ScriptSource's Path property will be the path argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Return a ScriptSource object from file contents with the current engine as the language binding.  
            
            The path's extension does NOT have to be in ScriptRuntime.GetRegisteredFileExtensions 
            or map to this language engine with ScriptRuntime.GetEngineByFileExtension.
            
            The ScriptSource's Path property will be the path argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,System.String)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            This method returns a ScriptSource object from a System.CodeDom.CodeObject.  
            This is a factory method for creating a ScriptSources with this language binding.
            
            The expected CodeDom support is extremely minimal for syntax-independent expression of semantics.  
            
            Languages may do more, but hosts should only expect CodeMemberMethod support, 
            and only sub nodes consisting of the following:
                CodeSnippetStatement
                CodeSnippetExpression
                CodePrimitiveExpression
                CodeMethodInvokeExpression
                CodeExpressionStatement (for holding MethodInvoke)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String)">
            <summary>
            These methods return ScriptSource objects from stream contents with the current engine as the language binding.  
            
            The default SourceCodeKind is File.
            
            The encoding defaults to Encoding.Default.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding)">
            <summary>
            These methods return ScriptSource objects from stream contents with the current engine as the language binding.  
            
            The default SourceCodeKind is File.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            These methods return ScriptSource objects from stream contents with the current engine as the language binding.  
            
            The encoding defaults to Encoding.Default.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.TextContentProvider,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            This method returns a ScriptSource with the content provider supplied with the current engine as the language binding.
            
            This helper lets you own the content provider so that you can implement a stream over internal host data structures, such as an editor's text representation.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetVariable(Microsoft.Scripting.Hosting.ScriptScope,System.String)">
            <summary>
            Fetches the value of a variable stored in the scope.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), then the name lookup is 
            a literal lookup of the name in the scope's dictionary.  Therefore, it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.RemoveVariable(Microsoft.Scripting.Hosting.ScriptScope,System.String)">
            <summary>
            This method removes the variable name and returns whether 
            the variable was bound in the scope when you called this method.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  If there is a default engine, then the name lookup uses that language's semantics.
            
            Some languages may refuse to remove some variables.  If the scope has a default language that has bound 
            variables that cannot be removed, the language engine throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.SetVariable(Microsoft.Scripting.Hosting.ScriptScope,System.String,System.Object)">
            <summary>
            Assigns a value to a variable in the scope, overwriting any previous value.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.TryGetVariable(Microsoft.Scripting.Hosting.ScriptScope,System.String,System.Object@)">
            <summary>
            Fetches the value of a variable stored in the scope and returns 
            a Boolean indicating success of the lookup.  
            
            When the method's result is false, then it assigns null to value.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetVariable``1(Microsoft.Scripting.Hosting.ScriptScope,System.String)">
            <summary>
            Fetches the value of a variable stored in the scope.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), then the name lookup is 
            a literal lookup of the name in the scope's dictionary.  Therefore, it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            
            Throws an exception if the engine cannot perform the requested type conversion.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.TryGetVariable``1(Microsoft.Scripting.Hosting.ScriptScope,System.String,``0@)">
            <summary>
            Fetches the value of a variable stored in the scope and returns 
            a Boolean indicating success of the lookup.  
            
            When the method's result is false, then it assigns default(T) to value.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            
            Throws an exception if the engine cannot perform the requested type conversion, 
            then it return false and assigns value to default(T).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ContainsVariable(Microsoft.Scripting.Hosting.ScriptScope,System.String)">
            <summary>
            This method returns whether the variable is bound in this scope.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetVariableHandle(Microsoft.Scripting.Hosting.ScriptScope,System.String)">
            <summary>
            Fetches the value of a variable stored in the scope and returns an the wrapped object as an ObjectHandle.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), then the name lookup is 
            a literal lookup of the name in the scope's dictionary.  Therefore, it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.SetVariable(Microsoft.Scripting.Hosting.ScriptScope,System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Assigns a value to a variable in the scope, overwriting any previous value.
            
            The ObjectHandle value is unwrapped before performing the assignment.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.TryGetVariableHandle(Microsoft.Scripting.Hosting.ScriptScope,System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Fetches the value of a variable stored in the scope and returns 
            a Boolean indicating success of the lookup.  
            
            When the method's result is false, then it assigns null to the value.  Otherwise
            an ObjectHandle wrapping the object is assigned to value.
            
            If there is no engine associated with the scope (see ScriptRuntime.CreateScope), 
            then the name lookup is a literal lookup of the name in the scope's dictionary.  Therefore, 
            it is case-sensitive for example.  
            
            If there is a default engine, then the name lookup uses that language's semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetService``1(System.Object[])">
            <summary>
            This method returns a language-specific service.  
            
            It provides a point of extensibility for a language implementation 
            to offer more functionality than the standard engine members discussed here.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetRegisteredIdentifiers">
            <summary>
            These methods return unique identifiers for this engine that map to this engine and its language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetRegisteredExtensions">
            <summary>
            These methods return file extensions for this engine that map to this engine and its language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.SetScriptSourceSearchPaths(System.String[])">
            <summary>
            This method sets the search paths used by the engine for loading files when a script wants 
            to import or require another file of code.  
            
            This setting affects this engine's processing of code that loads other files.  When hosts 
            call ScriptRuntime.ExecuteFile, the host's resolution or the default host's DLRPath 
            controls partial file name resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.FormatException(System.Exception)">
            <summary>
            This method returns a string in the style of this engine's language to describe the exception argument.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Operations">
            <summary>
            Returns a default ObjectOperations for the engine.  
            
            Because an ObjectOperations object caches rules for the types of 
            objects and operations it processes, using the default ObjectOperations for 
            many objects could degrade the caching benefits.  Eventually the cache for 
            some operations could degrade to a point where ObjectOperations stops caching and 
            does a full search for an implementation of the requested operation for the given objects.  
            
            Another reason to create a new ObjectOperations instance is to have it bound
            to the specific view of a ScriptScope.  Languages may attach per-language
            behavior to a ScriptScope which would alter how the operations are performed.
            
            For simple hosting situations, this is sufficient behavior.
            
            
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Options">
            <summary>
            This property returns the EngineOptions this engine is using.  
            
            EngineOptions lets you control behaviors such as whether debugging is enabled, 
            whether code should be interpreted or compiled, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Runtime">
            <summary>
            This property returns the ScriptRuntime for the context in which this engine executes.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageDisplayName">
            <summary>
            This property returns a display name for the engine or language that is suitable for UI.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageVersion">
            <summary>
            This property returns the engine's version as a string.  The format is language-dependent.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.NullArgBuilder">
            <summary>
            ArgBuilder which always produces null.  
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ArgBuilder">
            <summary>
            ArgBuilder provides an argument value used by the MethodBinder.  One ArgBuilder exists for each
            physical parameter defined on a method.  
            
            Contrast this with ParameterWrapper which represents the logical argument passed to the method.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ArgBuilder.ToExpression(Microsoft.Scripting.Generation.MethodBinderContext,System.Collections.Generic.IList{Microsoft.Scripting.Ast.Expression})">
            <summary>
            Provides the Expression which provides the value to be passed to the argument.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ArgBuilder.UpdateFromReturn(Microsoft.Scripting.Generation.MethodBinderContext,System.Collections.Generic.IList{Microsoft.Scripting.Ast.Expression})">
            <summary>
            Provides an Expression which will update the provided value after a call to the method.  May
            return null if no update is required.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ArgBuilder.ToReturnExpression(Microsoft.Scripting.Generation.MethodBinderContext)">
            <summary>
            If the argument produces a return value (e.g. a ref or out value) this provides
            the additional value to be returned.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.ArgBuilder.Type">
            <summary>
            Returns the type required for the argument or null if the ArgBuilder
            does not consume a type.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodBinderContext">
            <summary>
            Helper class for emitting calls via the MethodBinder.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DefaultBinder">
            <summary>
            Provides binding semantics for a language.  This include conversions as well as support
            for producing rules for actions.  These optimized rules are used for calling methods, 
            performing operators, and getting members using the ActionBinder's conversion semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeRule``1(Microsoft.Scripting.Actions.DynamicAction,System.Object[])">
            <summary>
            Produces a rule for the specified Action for the given arguments.
            
            The default implementation can produce rules for standard .NET types.  Languages should
            override this and provide any custom behavior they need and fallback to the default
            implementation if no custom behavior is required.
            </summary>
            <typeparam name="T">The type of the DynamicSite the rule is being produced for.</typeparam>
            <param name="action">The Action that is being performed.</param>
            <param name="args">The arguments to the action as provided from the call site at runtime.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.AllowKeywordArgumentSetting(System.Reflection.MethodBase)">
            <summary>
            Checks to see if the language allows keyword arguments to be bound to instance fields or
            properties and turned into sets.  By default this is only allowed on contructors.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.CopyOnWriteList`1">
            <summary>
            List optimized for few writes and multiple reads. It provides thread-safe read and write access. 
            Iteration is not thread-safe by default, but GetCopyForRead allows for iteration 
            without taking a lock.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CopyOnWriteList`1.GetCopyForRead">
            <summary>
            Gets a copy of the contents of the list. The copy will not change even if the original
            CopyOnWriteList object is modified. This method should be used to iterate the list in
            a thread-safe way if no lock is taken. Iterating on the original list is not guaranteed 
            to be thread-safe.
            </summary>
            <returns>The returned copy should not be modified by the caller.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.Parse(System.String[])">
            <exception cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"></exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.ParseOption(System.String,System.String@,System.String@)">
            <summary>
            name == null means that the argument doesn't specify an option; the value contains the entire argument
            name == "" means that the option name is empty (argument separator); the value is null then
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Restrictions.CreateTypeRestriction(Microsoft.Scripting.Ast.Expression,System.Type)">
            <summary>
            Creates one type identity test 
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DoOperationBinderHelper`1.TryMakeNullComparisonRule">
            <summary>
            Produces a rule for comparing a value to null - supports comparing object references and nullable types.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DoOperationBinderHelper`1.GetFallbackMembers(System.Type,Microsoft.Scripting.Actions.OperatorInfo)">
            <summary>
            Gets alternate members which are specially recognized by the DLR for specific types when
            all other member lookup fails.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.CallBinderHelper`2">
            <summary>
            Creates rules for performing method calls.  Currently supports calling built-in functions, built-in method descriptors (w/o 
            a bound value) and bound built-in method descriptors (w/ a bound value), delegates, types defining a "Call" method marked
            with SpecialName.
            </summary>
            <typeparam name="T">The type of the dynamic site</typeparam>
            <typeparam name="TAction">The specific type of CallAction</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallBinderHelper`2.MakeArgumentExpressions">
            <summary>
            Gets expressions to access all the arguments. This includes the instance argument. Splat arguments are
            unpacked in the output. The resulting array is similar to Rule.Parameters (but also different in some ways)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallBinderHelper`2.MakeActionOnCallRule(System.Reflection.MethodBase)">
            <summary>
            Sees if the target is implemented with ActionOnCallAttribute and if so attempts to get a rule from the attribute. 
            </summary>
            <returns>True if the method implements ActionOnCall, false if not.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallBinderHelper`2.MakeSplatTests">
            <summary>
            Makes test for param arrays and param dictionary parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallBinderHelper`2.GetArgumentNamesAndTypes(Microsoft.Scripting.SymbolId[]@,System.Type[]@)">
            <summary>
            Gets all of the argument names and types. The instance argument is not included
            </summary>
            <param name="argNames">The names correspond to the end of argTypes.
            ArgumentKind.Dictionary is unpacked in the return value.
            This is set to an array of size 0 if there are no keyword arguments</param>
            <param name="argTypes">Non named arguments are returned at the beginning.
            ArgumentKind.List is unpacked in the return value. </param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.CallBinderHelper`2.Instance">
            <summary>
            The instance for the target method, or null if this is a non-instance call.
            
            If it is set, it will typically be set to extract the instance from the Callable.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.ReadToken">
            <summary>
            Move the tokenizer past the next token and return its category.
            </summary>
            <returns>The token information associated with the token just scanned.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.SkipToken">
            <summary>
            Move the tokenizer past the next token.
            </summary>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.ReadTokens(System.Int32)">
            <summary>
            Get all tokens over a block of the stream.
            </summary>
            <remarks>
            <para>
            The scanner should return full tokens. If startLocation + length lands in the middle of a token, the full token
            should be returned.
            </para>
            </remarks>s
            <param name="characterCount">The mininum number of characters to process while getting tokens.</param>
            <returns>A enumeration of tokens.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.SkipTokens(System.Int32)">
            <summary>
            Scan from startLocation to at least startLocation + length.
            </summary>
            <param name="characterCount">The mininum number of characters to process while getting tokens.</param>
            <remarks>
            This method is used to determine state at arbitrary startLocation.
            </remarks>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.CurrentState">
            <summary>
            The current internal state of the scanner.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.CurrentPosition">
            <summary>
            The current startLocation of the scanner.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptIO">
            <summary>
            Provides host-redirectable IO streams used by DLR languages for default IO.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetOutput(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Used if the host stores the output as binary data.
            </summary>
            <param name="stream">Binary stream to write data to.</param>
            <param name="encoding">Encoding used to convert textual data written to the output by the script.</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Used if the host handles both kinds of data (textual and binary) by itself.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ObjectOperations">
            <summary>
            ObjectOperations provide a large catalogue of object operations such as member access, conversions, 
            indexing, and things like addition.  There are several introspection and tool support services available
            for more advanced hosts.  
            
            You get ObjectOperation instances from ScriptEngine, and they are bound to their engines for the semantics 
            of the operations.  There is a default instance of ObjectOperations you can share across all uses of the 
            engine.  However, very advanced hosts can create new instances.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.IsCallable(System.Object)">
            <summary>
            Returns true if the object can be called, false if it cannot.  
            
            Even if an object is callable Call may still fail if an incorrect number of arguments or type of arguments are provided.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Call(System.Object,System.Object[])">
            <summary>
            Calls the provided object with the given parameters and returns the result.
            
            The prefered way of calling objects is to convert the object to a strongly typed delegate 
            using the ConvertTo methods and then invoking that delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj.  Throws an exception if the member does not exist or is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj and converts it to the type T.  Throws an exception if the
            member does not exist, is write-only, or cannot be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Object,System.String,System.Object@)">
            <summary>
            Gets the member name from the object obj.  Returns true if the member is successfully retrieved and 
            stores the value in the value out param.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Object,System.String)">
            <summary>
            Returns true if the object has a member named name, false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Object,System.String)">
            <summary>
            Removes the member name from the object obj.  Returns true if the member was successfully removed
            or false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Object,System.String,System.Object)">
            <summary>
            Sets the member name on object obj to value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Object,System.String,``0)">
            <summary>
            Sets the member name on object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo``1(System.Object)">
            <summary>
            Convers the object obj to the type T.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T.  Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type.  Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(Microsoft.Scripting.Runtime.Operators,System.Object)">
            <summary>
            Performs a generic unary operation on the specified target and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation``2(Microsoft.Scripting.Runtime.Operators,``0)">
            <summary>
            Performs a generic unary operation on the strongly typed target and returns the value as the specified type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(Microsoft.Scripting.Runtime.Operators,System.Object,System.Object)">
            <summary>
            Performs the generic binary operation on the specified targets and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation``3(Microsoft.Scripting.Runtime.Operators,``0,``1)">
            <summary>
            Peforms the generic binary operation on the specified strongly typed targets and returns
            the strongly typed result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Add(System.Object,System.Object)">
            <summary>
            Performs addition on the specified targets and returns the result.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Subtract(System.Object,System.Object)">
            <summary>
            Performs subtraction on the specified targets and returns the result.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Power(System.Object,System.Object)">
            <summary>
            Raises the first object to the power of the second object.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies the two objects.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Divide(System.Object,System.Object)">
            <summary>
            Divides the first object by the second object.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Modulus(System.Object,System.Object)">
            <summary>
            Performs modulus of the 1st object by the second object.  Throws an exception
            if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LeftShift(System.Object,System.Object)">
            <summary>
            Shifts the left object left by the right object.  Throws an exception if the
            operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RightShift(System.Object,System.Object)">
            <summary>
            Shifts the left object right by the right object.  Throws an exception if the
            operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseAnd(System.Object,System.Object)">
            <summary>
            Performs a bitwise-and of the two operands.  Throws an exception if the operation 
            cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseOr(System.Object,System.Object)">
            <summary>
            Performs a bitwise-or of the two operands.  Throws an exception if the operation 
            cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExclusiveOr(System.Object,System.Object)">
            <summary>
            Performs a exclusive-or of the two operands.  Throws an exception if the operation 
            cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThan(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is less than the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThan(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is greater than the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThanOrEqual(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is less than or equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThanOrEqual(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is greater than or equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Equal(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.NotEqual(System.Object,System.Object)">
            <summary>
            Compares the two objects and returns true if the left object is not equal to the right object.
            Throws an exception if hte comparison cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCodeRepresentation(System.Object)">
            <summary>
            Returns a string which describes the object as it appears in source code
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMemberNames(System.Object)">
            <summary>
            Returns a list of strings which contain the known members of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetDocumentation(System.Object)">
            <summary>
            Returns a string providing documentation for the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCallSignatures(System.Object)">
            <summary>
            Returns a list of signatures applicable for calling the specified object in a form displayable to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.IsCallable(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns true if the remote object is callable.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Call(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle[])">
            <summary>
            Calls the specified remote object with the specified remote parameters.
            
            Though delegates are preferable for calls they may not always be usable for remote objects.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Call(System.Runtime.Remoting.ObjectHandle,System.Object[])">
            <summary>
            Calls the specified remote object with the local parameters which will be serialized
            to the remote app domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Runtime.Remoting.ObjectHandle,System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Sets the remote object as a member on the provided remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Runtime.Remoting.ObjectHandle,System.String,``0)">
            <summary>
            Sets the member name on the remote object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Gets the member name on the remote object.  Throws an exception if the member is not defined or
            is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Gets the member name on the remote object.  Throws an exception if the member is not defined or
            is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Runtime.Remoting.ObjectHandle,System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Gets the member name on the remote object.  Returns false if the member is not defined or
            is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Tests to see if the member name is defined on the remote object.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>
            Removes the member from the remote object
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Converts the remote object into the specified type returning a handle to
            the new remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Unwrap``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Unwraps the remote object and converts it into the specified type before
            returning it.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(Microsoft.Scripting.Runtime.Operators,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs the specified unary operator on the remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(Microsoft.Scripting.Runtime.Operators,System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs the specified binary operator on the remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Add(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Adds the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Subtract(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Subtracts the 1st remote object from the second.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Power(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Raises the 1st remote object to the power of the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Multiply(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Multiplies the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Divide(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Divides the 1st remote object by the 2nd. Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Modulus(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs modulus on the 1st remote object by the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LeftShift(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Shifts the 1st remote object left by the 2nd remote object.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RightShift(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Shifts the 1st remote  object right by the 2nd remote object.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseAnd(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs bitwise-and on the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseOr(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs bitwise-or on the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExclusiveOr(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Performs exclusive-or on the two remote objects.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThan(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is less than the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThan(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is greater than the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThanOrEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is less than or equal to the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThanOrEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is greater than or equal to than the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Equal(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is equal to the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.NotEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Compares the two remote objects and returns true if the 1st is not equal to the 2nd.  Throws an exception if the operation cannot be performed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCodeRepresentation(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a string which describes the remote object as it appears in source code
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMemberNames(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a list of strings which contain the known members of the remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetDocumentation(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a string providing documentation for the specified remote object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCallSignatures(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Returns a list of signatures applicable for calling the specified object in a form displayable to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetLocalObject(System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Helper to unwrap an object - in the future maybe we should validate the current app domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetLocalObjects(System.Runtime.Remoting.ObjectHandle[])">
            <summary>
            Helper to unwrap multiple objects
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.SiteLocalStorage`1">
            <summary>
            Provides storage which is flowed into a callers site.  The same storage object is 
            flowed for multiple calls enabling the callee to cache data that can be re-used
            across multiple calls.
            
            Data is a public field so that this works properly with DynamicSite's as the reference
            type (and EnsureInitialize)
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodBinder">
            <summary>
            Provides binding and overload resolution to .NET methods.
            
            MethodBinder's can be used for:
                generating new AST code for calling a method 
                calling a method via reflection at runtime
                (not implemented) performing an abstract call
                
            MethodBinder's support default arguments, optional arguments, by-ref (in and out), and keyword arguments.
            
            Implementation Details:
            
            The MethodBinder works by building up a TargetSet for each number of effective arguments that can be
            passed to a set of overloads.  For example a set of overloads such as:
                foo(object a, object b, object c)
                foo(int a, int b)
                
            would have 2 target sets - one for 3 parameters and one for 2 parameters.  For parameter arrays
            we fallback and create the appropriately sized TargetSet on demand.
            
            Each TargetSet consists of a set of MethodCandidate's.  Each MethodCandidate knows the flattened
            parameters that could be received.  For example for a function such as:
                foo(params int[] args)
                
            When this method is in a TargetSet of size 3 the MethodCandidate takes 3 parameters - all of them
            ints; if it's in a TargetSet of size 4 it takes 4 parameters.  Effectively a MethodCandidate is 
            a simplified view that allows all arguments to be treated as required positional arguments.
            
            Each MethodCandidate in turn refers to a MethodTarget.  The MethodTarget is composed of a set
            of ArgBuilder's and a ReturnBuilder which know how to consume the positional arguments and pass
            them to the appropriate argument of the destination method.  This includes routing keyword
            arguments to the correct position, providing the default values for optional arguments, etc...
            
            After binding is finished the MethodCandidates are thrown away and a BindingTarget is returned. 
            The BindingTarget indicates whether the binding was successful and if not any additional information
            that should be reported to the user about the failed binding.  It also exposes the MethodTarget which
            allows consumers to get the flattened list of required parameters for the call.  MethodCandidates
            are not exposed and are an internal implementation detail of the MethodBinder.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodBinder.MakeBinder(Microsoft.Scripting.Actions.ActionBinder,System.String,System.Collections.Generic.IList{System.Reflection.MethodBase})">
            <summary>
            Creates a new MethodBinder for binding to the specified methods that will attempt to bind
            at all defined NarrowingLevels.
            
            The provided ActionBinder is used for determining overload resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodBinder.MakeBinder(Microsoft.Scripting.Actions.ActionBinder,System.String,System.Collections.Generic.IList{System.Reflection.MethodBase},Microsoft.Scripting.SymbolId[])">
            <summary>
            Creates a new MethodBinder for binding to the specified methods on a call which includes keyword arguments that
            will attempt to bind at all defined NarrowingLevels.
            
            The provided ActionBinder is used for determining overload resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodBinder.MakeBinder(Microsoft.Scripting.Actions.ActionBinder,System.String,System.Collections.Generic.IList{System.Reflection.MethodBase},Microsoft.Scripting.Generation.NarrowingLevel,Microsoft.Scripting.Generation.NarrowingLevel)">
            <summary>
            Creates a new MethodBinder for binding to the specified methods this will attempt to bind at 
            the specified NarrowingLevels.
            
            The provided ActionBinder is used for determining overload resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodBinder.MakeBinder(Microsoft.Scripting.Actions.ActionBinder,System.String,System.Collections.Generic.IList{System.Reflection.MethodBase},Microsoft.Scripting.SymbolId[],Microsoft.Scripting.Generation.NarrowingLevel,Microsoft.Scripting.Generation.NarrowingLevel)">
            <summary>
            Creates a new MethodBinder for binding to the specified methods on a call which includes keyword arguments that
            will attempt to bind at the specified NarrowingLevels.
            
            The provided ActionBinder is used for determining overload resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodBinder.MakeBindingTarget(Microsoft.Scripting.Runtime.CallTypes,System.Type[])">
            <summary>
            Creates a BindingTarget given the specified CallType and parameter types.
            
            The BindingTarget can then be tested for the success or particular type of
            failure that prevents the method from being called.  The BindingTarget can
            also be called reflectively at runtime, create an Expression for embedding in
            a RuleBuilder, or be used for performing an abstract call.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodBinder.AbstractCall(Microsoft.Scripting.Runtime.CallTypes,System.Collections.Generic.IList{Microsoft.Scripting.Ast.AbstractValue})">
            <summary>
            Attempts to perform an abstact call on the method and returns the AbstractValue
            which represents the result.
            
            First this method will attempt to acquire a BindingTarget, and if that's
            successful the method will be abstractly called.  Otherwise an abstract exception will be
            thrown indicating the reason the method cannot be called.  Languages which
            need to report particular error messages should instead call MakeBindingTarget
            and report their own errors on failure.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.MethodBinder.Name">
            <summary>
            Gets the name of the MethodBinder as provided at construction time.
            
            The name may differ from the name of the underlying method bases if the
            language provides some mapping from .NET method names to language specific
            method names.  It is flowed through the MethodBinder primarily for error
            reporting purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodBinder.TargetSet">
            <summary>
            Represents a collection of MethodCandidate's which all accept the
            same number of logical parameters.  For example a params method
            and a method with 3 parameters would both be a TargetSet for 3 parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.CallFailure">
            <summary>
            Represents the reason why a call to a specific method could not be performed by the MethodBinder.
            
            The reason for the failure is specified by the CallFailureReason property.  Once this property
            has been consulted the other properties can be consulted for more detailed information regarding
            the failure.
            
            If reason is ConversionFailure the ConversionResults property will be non-null.
            If reason is UnassignableKeyword the KeywordArguments property will be non-null and include
                the keywords which could not be assigned.
            If reason is DuplicateKeyword the KeywordArguments property will be non-null and include
                the keywords which were duplicated (either by the keywords themselves or by positional
                arguments).
                
            MethodTarget is always set and indicates the method which failed to bind.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.CallFailure.Target">
            <summary>
            Gets the MethodTarget which the call failed for.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.CallFailure.Reason">
            <summary>
            Gets the reason for the call failure which determines the other 
            properties of the CallFailure which should be consulted.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.CallFailure.ConversionResults">
            <summary>
            Gets a list of ConversionResult's for each parameter indicating
            whether the conversion was successful or failed and the types
            being converted.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.CallFailure.KeywordArguments">
            <summary>
            Gets the list of keyword arguments that were either dupliated or
            unassignable.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.BindingTarget">
            <summary>
            Encapsulates the result of an attempt to bind to one or methods using the MethodBinder.
            
            Users should first check the Result property to see if the binding was successful or
            to determine the specific type of failure that occured.  If the binding was successful
            MakeExpression can then be called to create an expression which calls the method.
            If the binding was a failure callers can then create a custom error message based upon
            the reason the call failed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.BindingTarget.#ctor(System.String,System.Int32,Microsoft.Scripting.Generation.MethodTarget,Microsoft.Scripting.Generation.NarrowingLevel,System.Type[])">
            <summary>
            Creates a new BindingTarget when the method binding has succeeded
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.BindingTarget.#ctor(System.String,System.Int32,System.Int32[])">
            <summary>
            Creates a new BindingTarget when the method binding has failed due to an incorrect argument count
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.BindingTarget.#ctor(System.String,System.Int32,Microsoft.Scripting.Generation.CallFailure[])">
            <summary>
            Creates a new BindingTarget when the method binding has failued due to 
            one or more parameters which could not be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.BindingTarget.#ctor(System.String,System.Int32,Microsoft.Scripting.Generation.MethodTarget[])">
            <summary>
            Creates a new BindingTarget when the match was ambigious
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.BindingTarget.MakeExpression(Microsoft.Scripting.Actions.RuleBuilder,System.Collections.Generic.IList{Microsoft.Scripting.Ast.Expression})">
            <summary>
            Gets an Expression which calls the binding target if the method binding succeeded.
            
            Throws InvalidOperationException if the binding failed.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.Result">
            <summary>
            Gets the result of the attempt to bind.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.Method">
            <summary>
            Returns the method if the binding succeeded, or null if no method was applicable.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.Name">
            <summary>
            Gets the name of the method as supplied to the MethodBinder.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.MethodTarget">
            <summary>
            Returns the MethodTarget if the binding succeeded, or null if no method was applicable.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.AmbigiousMatches">
            <summary>
            Returns the methods which don't have any matches or null if Result == BindingResult.AmbigiousMatch
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.CallFailures">
            <summary>
            Returns the methods and their associated conversion failures if Result == BindingResult.CallFailure.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.ExpectedArgumentCount">
            <summary>
            Returns the acceptable number of arguments which can be passed to the method if Result == BindingResult.IncorrectArgumentCount.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.ActualArgumentCount">
            <summary>
            Returns the number of arguments provided to the call.  0 if the call succeeded or failed for a reason other
            than argument count mismatch.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.ArgumentTests">
            <summary>
            Gets the type tests that need to be performed to ensure that a call is
            not applicable for an overload.
            
            The members of the array correspond to each of the arguments.  An element is 
            null if no test is necessary.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.ReturnType">
            <summary>
            Returns the return type of the binding, or null if no method was applicable.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.NarrowingLevel">
            <summary>
            Returns the NarrowingLevel of the method if the call succeeded.  If the call
            failed returns NarrowingLevel.None.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.BindingTarget.Success">
            <summary>
            Returns true if the binding was succesful, false if it failed.
            
            This is an alias for BindingTarget.Result == BindingResult.Success.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.RoundAwayFromZero(System.Double)">
            <summary>
            Behaves like Math.Round(value, MidpointRounding.AwayFromZero)
            Needed because CoreCLR doesn't support this particular overload of Math.Round
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.RoundAwayFromZero(System.Double,System.Int32)">
            <summary>
            Behaves like Math.Round(value, precision, MidpointRounding.AwayFromZero)
            However, it works correctly on negative precisions and cases where precision is
            outside of the [-15, 15] range.
            
            (This function is also needed because CoreCLR lacks this overload.)
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptHostProxy">
            <summary>
            Provides hosting to DLR. Forwards DLR requests to the ScriptHost. 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.CompiledCode">
            <summary>
            Hosting API counterpart for <see cref="P:Microsoft.Scripting.Hosting.CompiledCode.ScriptCode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute">
            <summary>
            TODO: Executes code in an optimized scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            Execute code within a given scope and returns the result.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.CompiledCode.Engine">
            <summary>
            Engine that compiled this code.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ParameterWrapper">
            <summary>
            ParameterWrapper represents the logical view of a parameter. For eg. the byref-reduced signature
            of a method with byref parameters will be represented using a ParameterWrapper of the underlying
            element type, since the logical view of the byref-reduced signature is that the argument will be
            passed by value (and the updated value is included in the return value).
            
            Contrast this with ArgBuilder which represents the real physical argument passed to the method.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.DefaultArgBuilder">
            <summary>
            ArgBuilder which provides a default parameter value for a method call.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionHelpers.RemoveName(Microsoft.Scripting.Runtime.CodeContext,Microsoft.Scripting.SymbolId)">
            <summary>
            Called from generated code, helper to remove a name
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MetaObject.NeedsDeferral">
            <summary>
            Checks to see if the known type is good enough for performing operations
            on.  This is possible if the type has a value or of the known type of the
            expression is a sealed type.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ActionOnCallAttribute">
            <summary>
            Provides a mechanism to enable a calls body to be hoisted into a dynamic site.
            
            When a call site is being produced to call a method decorated with the subtype GetRule will be called
            to produce the rule.  Return a new rule if the call can be optimized or null if the default behavior
            should be applied.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.WeakDictionary`2">
            <summary>
            Similar to Dictionary[TKey,TValue], but it also ensures that the keys will not be kept alive
            if the only reference is from this collection. The value will be kept alive as long as the key
            is alive.
            
            This currently has a limitation that the caller is responsible for ensuring that an object used as 
            a key is not also used as a value in *any* instance of a WeakHash. Otherwise, it will result in the
            object being kept alive forever. This effectively means that the owner of the WeakHash should be the
            only one who has access to the object used as a value.
            
            Currently, there is also no guarantee of how long the values will be kept alive even after the keys
            get collected. This could be fixed by triggerring CheckCleanup() to be called on every garbage-collection
            by having a dummy watch-dog object with a finalizer which calls CheckCleanup().
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.CheckCleanup">
            <summary>
            Check if any of the keys have gotten collected
            
            Currently, there is also no guarantee of how long the values will be kept alive even after the keys
            get collected. This could be fixed by triggerring CheckCleanup() to be called on every garbage-collection
            by having a dummy watch-dog object with a finalizer which calls CheckCleanup().
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectedCaller.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates a new ReflectedCaller which can be used to quickly invoke the provided MethodInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectedCaller.TryGetParameterOrReturnType(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],System.Int32)">
            <summary>
            Gets the next type or null if no more types are available.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectedCaller.SlowCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Uses reflection to create new instance of the appropriate ReflectedCaller
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectedCaller.FastCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Fast creation works if we have a known primitive types for the entire
            method siganture.  If we have any non-primitive types then FastCreate
            falls back to SlowCreate which works for all types.
            
            Fast creation is fast because it avoids using reflection (MakeGenericType
            and Activator.CreateInstance) to create the types.  It does this through
            calling a series of generic methods picking up each strong type of the
            signature along the way.  When it runs out of types it news up the 
            appropriate ReflectedCaller with the strong-types that have been built up.
            
            One relaxation is that for return types which are non-primitive types
            we can fallback to object due to relaxed delegates.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.GetTupleType(System.Int32)">
            <summary>
            Gets the unbound generic Tuple type which has at lease size slots or null if a large enough tuple is not available.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.MakeTupleType(System.Type[])">
            <summary>
            Creates a generic tuple with the specified types.  
            
            If the number of slots fits within the maximum tuple size then we simply 
            create a single tuple.  If it's greater then we create nested tuples 
            (e.g. a Tuple`2 which contains a Tuple`128 and a Tuple`8 if we had a size of 136).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.GetSize(System.Type)">
            <summary>
            Gets the number of usable slots in the provided Tuple type including slots available in nested tuples.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.MakeTuple(System.Type,System.Object[])">
            <summary>
            Creates a new instance of tupleType with the specified args.  If the tuple is a nested
            tuple the values are added in their nested forms.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.GetTupleValues(Microsoft.Scripting.Tuple)">
            <summary>
            Gets the values from a tuple including unpacking nested values.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.GetAccessPath(System.Type,System.Int32)">
            <summary>
            Gets the series of properties that needs to be accessed to access a logical item in a potentially nested tuple.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Tuple.GetAccessProperties(System.Type,System.Int32,System.Int32)">
            <summary>
            Gets the series of properties that needs to be accessed to access a logical item in a potentially nested tuple.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicOperations">
            <summary>
            ObjectOperations provide a large catalogue of object operations such as member access, conversions, 
            indexing, and things like addition.  There are several introspection and tool support services available
            for more advanced hosts.  
            
            You get ObjectOperation instances from ScriptEngine, and they are bound to their engines for the semantics 
            of the operations.  There is a default instance of ObjectOperations you can share across all uses of the 
            engine.  However, very advanced hosts can create new instances.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.CleanupThreshold">
            <summary> the number of sites required before we'll try cleaning up the cache... </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.RemoveThreshold">
            <summary> the minimum difference between the average that is required to remove </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.StopCleanupThreshold">
            <summary> the maximum number we'll remove on a single cache cleanup </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.ClearThreshold">
            <summary> the number of sites we should clear after if we can't make progress cleaning up otherwise </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations._context">
            <summary> a shared instance of CodeContext used for all object operations </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations._sites">
            <summary> a dictionary of SiteKey's which are used to cache frequently used operations, logically a set </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.LastCleanup">
            <summary> the # of sites we had created at the last cleanup </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.SitesCreated">
            <summary> the total number of sites we've ever created </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.Call(System.Object,System.Object[])">
            <summary>
            Calls the provided object with the given parameters and returns the result.
            
            The prefered way of calling objects is to convert the object to a strongly typed delegate 
            using the ConvertTo methods and then invoking that delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj.  Throws an exception if the member does not exist or is write-only.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember``1(System.Object,System.String)">
            <summary>
            Gets the member name from the object obj and converts it to the type T.  Throws an exception if the
            member does not exist, is write-only, or cannot be converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryGetMember(System.Object,System.String,System.Object@)">
            <summary>
            Gets the member name from the object obj.  Returns true if the member is successfully retrieved and 
            stores the value in the value out param.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ContainsMember(System.Object,System.String)">
            <summary>
            Returns true if the object has a member named name, false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.RemoveMember(System.Object,System.String)">
            <summary>
            Removes the member name from the object obj.  Returns true if the member was successfully removed
            or false if the member does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember(System.Object,System.String,System.Object)">
            <summary>
            Sets the member name on object obj to value.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember``1(System.Object,System.String,``0)">
            <summary>
            Sets the member name on object obj to value.  This overload can be used to avoid
            boxing and casting of strongly typed members.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ConvertTo``1(System.Object)">
            <summary>
            Convers the object obj to the type T.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the object obj to the type type.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryConvertTo``1(System.Object,``0@)">
            <summary>
            Converts the object obj to the type T.  Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            Converts the object obj to the type type.  Returns true if the value can be converted, false if it cannot.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation(Microsoft.Scripting.Runtime.Operators,System.Object)">
            <summary>
            Performs a generic unary operation on the specified target and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation``2(Microsoft.Scripting.Runtime.Operators,``0)">
            <summary>
            Performs a generic unary operation on the strongly typed target and returns the value as the specified type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation(Microsoft.Scripting.Runtime.Operators,System.Object,System.Object)">
            <summary>
            Performs the generic binary operation on the specified targets and returns the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation``3(Microsoft.Scripting.Runtime.Operators,``0,``1)">
            <summary>
            Peforms the generic binary operation on the specified strongly typed targets and returns
            the strongly typed result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetSite``2(Microsoft.Scripting.Actions.DynamicAction)">
            <summary>
            Helper to create a new dynamic site w/ the specified type parameters for the provided action.
            
            This will either get the site from the cache or create a new site and return it.  The cache
            may be cleaned if it's gotten too big since the last usage.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetSite``3(Microsoft.Scripting.Actions.DynamicAction)">
            <summary>
            Helper to create a new dynamic site w/ the specified type parameters for the provided action.
            
            This will either get the site from the cache or create a new site and return it.  The cache
            may be cleaned if it's gotten too big since the last usage.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetSite``4(Microsoft.Scripting.Actions.DynamicAction)">
            <summary>
            Helper to create a new dynamic site w/ the specified type parameters for the provided action.
            
            This will either get the site from the cache or create a new site and return it.  The cache
            may be cleaned if it's gotten too big since the last usage.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetSiteWorker``1(Microsoft.Scripting.Actions.DynamicAction,Microsoft.Scripting.Utils.Function{Microsoft.Scripting.Actions.DynamicAction,``0})">
            <summary>
            Helper to create to get or create the dynamic site - called by the GetSite methods.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.Cleanup">
            <summary>
            Removes items from the cache that have the lowest usage...
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicOperations.SiteKey">
            <summary>
            Helper class for tracking all of our unique dynamic sites and their
            usage patterns.  We hash on the combination of the action and site type.
            
            We also track the hit count and the key holds the site associated w/ the 
            key.  Logically this is a set based upon the action and site-type but we
            store it in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DelegateSignatureInfo">
            <summary>
            Used as the key for the RuntimeHelpers.GetDelegate method caching system
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DelegateSignatureInfo.EmitClrCallStub(Microsoft.Scripting.Generation.ILGen)">
            <summary>
            Generates stub to receive the CLR call and then call the dynamic language code.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptRuntime">
            <summary>
            Represents a Dynamic Language Runtime in Hosting API. 
            Hosting API counterpart for <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.Create">
            <summary>
            Creates ScriptRuntime in the current app-domain and initialized with default settings.
            Also creates a default ScriptHost instance associated with the runtime, also in the current app-domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.Create(Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>
            Creates ScriptRuntime in the current app-domain and initialized according to the the specified settings.
            Creates an instance of host class specified in the setup and associates it with the created runtime.
            Both Runtime and ScriptHost are collocated in the current app-domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.Create(System.AppDomain)">
            <summary>
            Creates ScriptRuntime in the specified app-domain and initialized with default settings.
            Also creates a default ScriptHost instance associated with the runtime, also in the given app-domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.Create(System.AppDomain,Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>
            Creates ScriptRuntime in the current app-domain and initialized according to the the specified settings.
            Creates an instance of host class specified in the setup and associates it with the created runtime.
            Both Runtime and ScriptHost are collocated in the specified app-domain.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByFileExtension(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngine(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>
            Gets engine for the specified language.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineNoLockNoNotification(Microsoft.Scripting.Runtime.LanguageContext,System.Boolean@)">
            <summary>
            Looks up the engine for the specified language. It the engine hasn't been created in this Runtime, it is instantiated here.
            The method doesn't lock nor send notifications to the host.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.ExecuteFile(System.String)">
            <exception cref="T:System.ArgumentException">
            path is empty, contains one or more of the invalid characters defined in GetInvalidPathChars or doesn't have an extension.
            </exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            This method walks the assembly's namespaces and name bindings to ScriptRuntime.Globals 
            to represent the types available in the assembly.  Each top-level namespace name gets 
            bound in Globals to a dynamic object representing the namespace.  Within each top-level 
            namespace object, nested namespace names are bound to dynamic objects representing each 
            tier of nested namespaces.  When this method encounters the same namespace-qualified name, 
            it merges names together objects representing the namespaces.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Globals">
            <summary>
            This property returns the "global object" or name bindings of the ScriptRuntime as a ScriptScope.  
            
            You can set the globals scope, which you might do if you created a ScriptScope with an 
            IAttributesCollection so that your host could late bind names.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ReferenceArgBuilder">
            <summary>
            An argument that the user wants to explicitly pass by-reference (with copy-in copy-out semantics).
            The user passes a StrongBox[T] object whose value will get updated when the call returns.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.SimpleArgBuilder">
            <summary>
            SimpleArgBuilder produces the value produced by the user as the argument value.  It
            also tracks information about the original parameter and is used to create extended
            methods for params arrays and param dictionary functions.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.CallFailureReason.None">
            <summary>
            Default value, their was no CallFailure.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.CallFailureReason.ConversionFailure">
            <summary>
            One of more parameters failed to be converted
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.CallFailureReason.UnassignableKeyword">
            <summary>
            One or more keyword arguments could not be successfully assigned to a positional argument
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.CallFailureReason.DuplicateKeyword">
            <summary>
            One or more keyword arguments were duplicated or would have taken the spot of a 
            provided positional argument.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.GetMemberBinderHelper`1">
            <summary>
            Builds a rule for a GetMemberAction.  Supports all built-in .NET members, the OperatorMethod 
            GetBoundMember, and StrongBox instances.
            
            The RuleMaker sets up it's initial state grabbing the incoming type and the type we should look members up
            from.  It then does the lookup for the members using the current context's ActionBinder and then binds to
            the returned members if the match is non-ambigious.  
            
            The target of the rule is built up using a series of block statements as the body.  
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.GetMemberBinderHelper`1.MakeOperatorGetMemberBody(System.Type,System.String)">
            <summary> if a member-injector is defined-on or registered-for this type call it </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.GetMemberBinderHelper`1.Instance">
            <summary> Gets the Expression that represents the instance we're looking up </summary>
        </member>
        <member name="T:Microsoft.Scripting.TokenTriggers">
            <summary>
            See also <c>Microsoft.VisualStudio.Package.TokenTriggers</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IdDispenser.GetObject(System.Int64)">
            <summary>
            Given an ID returns the object associated with that ID.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IdDispenser.GetId(System.Object)">
            <summary>
            Gets a unique ID for an object
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IdDispenser.Cleanup">
            <summary>
            Goes over the hashtable and removes empty entries 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IdDispenser.Wrapper">
            <summary>
            Weak-ref wrapper caches the weak reference, our hash code, and the object ID.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IdDispenser.WrapperComparer">
            <summary>
            WrapperComparer treats Wrapper as transparent envelope 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.Cast">
            <summary>
            Implements explicit casts supported by the runtime.
            </summary>
            <summary>
            Implements explicit casts supported by the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.Explicit(System.Object,System.Type)">
            <summary>
            Explicitly casts the object to a given type (and returns it as object)
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorListener">
            <summary>
            The host can use this class to track for errors reported during script parsing and compilation.
            Hosting API counterpart for <see cref="T:Microsoft.Scripting.ErrorSink"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodCandidate">
             <summary>
             MethodCandidate represents the different possible ways of calling a method or a set of method overloads.
             A single method can result in multiple MethodCandidates. Some reasons include:
             - Every optional parameter or parameter with a default value will result in a candidate
             - The presence of ref and out parameters will add a candidate for languages which want to return the updated values as return values.
             - ArgumentKind.List and ArgumentKind.Dictionary can result in a new candidate per invocation since the list might be different every time.
            
             Each MethodCandidate represents the parameter type for the candidate using ParameterWrapper.
             
             Contrast this with MethodTarget which represents the real physical invocation of a method
             </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodCandidate.MakeParamsExtended(Microsoft.Scripting.Actions.ActionBinder,System.Int32,Microsoft.Scripting.SymbolId[])">
            <summary>
            Builds a new MethodCandidate which takes count arguments and the provided list of keyword arguments.
            
            The basic idea here is to figure out which parameters map to params or a dictionary params and
            fill in those spots w/ extra ParameterWrapper's.  
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.OperatorInfo">
            <summary>
            OperatorInfo provides a mapping from DLR operators to their associated .NET methods.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.OperatorInfo.GetOperatorInfo(Microsoft.Scripting.Runtime.Operators)">
            <summary>
            Given an operator returns the OperatorInfo associated with the operator or null
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.OperatorInfo.Operator">
            <summary>
            The operator the OperatorInfo provides info for.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.OperatorInfo.Name">
            <summary>
            The primary method name associated with the method.  This method name is
            usally in the form of op_Operator (e.g. op_Addition).
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.OperatorInfo.AlternateName">
            <summary>
            The secondary method name associated with the method.  This method name is
            usually a standard .NET method name with pascal casing (e.g. Add).
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ISlice">
            <summary>
            A useful interface for taking slices of numeric arrays, inspired by Python's Slice objects.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ISlice.Start">
            <summary>
            The starting index of the slice or null if no first index defined
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ISlice.Stop">
            <summary>
            The ending index of the slice or null if no ending index defined
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ISlice.Step">
            <summary>
            The length of step to take
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptHost">
             <summary>
             ScriptHost is collocated with ScriptRuntime in the same app-domain. 
             The host can implement a derived class to consume some notifications and/or 
             customize operations like TryGetSourceUnit,ResolveSourceUnit, etc.
            
             The areguments to the the constructor of the derived class are specified in ScriptRuntimeSetup 
             instance that enters ScriptRuntime initialization.
             
             If the host is remote with respect to DLR (i.e. also with respect to ScriptHost)
             and needs to access objects living in its app-domain it can pass MarshalByRefObject 
             as an argument to its ScriptHost subclass constructor.
             </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.ScriptHost._runtime">
            <summary>
            The runtime the host is attached to.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.TryGetSourceFile(Microsoft.Scripting.Hosting.ScriptEngine,System.String)">
            <summary>
            Gets ScriptSource representing a source file on a specifed path. The format of the path is host defined.
            The resulting ScriptSource is associated with given language (engine). 
            </summary>
            <exception cref="T:System.ArgumentNullException">Engine or path is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.TryGetSourceFile(Microsoft.Scripting.Hosting.ScriptEngine,System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            Gets ScriptSource representing a source file on a specifed path and encoding. The format of the path is host defined.
            The resulting ScriptSource is associated with given language (engine). 
            </summary>
            <exception cref="T:System.ArgumentNullException">Engine, path or encoding is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.ResolveSourceFileName(System.String,System.String@,Microsoft.Scripting.Hosting.ScriptEngine@)">
            <summary>
            Resolves the given name to a source file path.
            Directories specified in SourceUnitResolutionPath are searched for files whose name is given and whose extension
            is one of the extensions registered with the runtime (e.g. ".py", ".rb", etc).
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">No file matches the specified name.</exception>
            <exception cref="T:Microsoft.Scripting.AmbiguousFileNameException">Multiple matching files were found in a directory.</exception>
            <exception cref="T:System.ArgumentNullException">Name is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">Name contains invalid characters (see System.IO.Path.GetInvalidFileNameChars).</exception>
            <returns>Resolved file path.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.ResolveSourceFile(System.String)">
            <summary>
            Resolves file name using ResolveSourceFileName. If successful returns ScriptSource pointing to the resolved file.
            System.Encoding.Default is used for as the encoding of the resulting ScriptSource.
            The kind of the ScriptSource is set to SourceCodeKind.File.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">No file matches the specified name.</exception>
            <exception cref="T:Microsoft.Scripting.AmbiguousFileNameException">Multiple matching files were found in a directory.</exception>
            <exception cref="T:System.ArgumentNullException">Name is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">Name contains invalid characters (see System.IO.Path.GetInvalidFileNameChars).</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.RuntimeAttached">
            <summary>
            Invoked after the initialization of the associated Runtime is finished.
            The host can override this method to perform additional initialization of runtime (like loading assemblies etc.).
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.EngineCreated(Microsoft.Scripting.Hosting.ScriptEngine)">
            <summary>
            Invoked after a new language is loaded into the Runtime.
            The host can override this method to perform additional initialization of language engines.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptHost.SourceFileSearchPath">
            <summary>
            Gets the default path used for searching for source units.
            Default implementation returns content of <see cref="F:Microsoft.Scripting.Hosting.ScriptHost.PathEnvironmentVariableName"/> environment variable.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.OutArgBuilder">
            <summary>
            Builds the argument for an out argument when not passed a StrongBox.  The out parameter
            is returned as an additional return value.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.BinderOps">
            <summary>
            Helper methods that calls are generated to from the default DLR binders.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.BinderOps._dynamicDelegateCache">
            <summary> Table of dynamicly generated delegates which are shared based upon method signature. </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.GetDelegate(Microsoft.Scripting.Runtime.CodeContext,System.Object,System.Type)">
            <summary>
            Creates a delegate with a given signature that could be used to invoke this object from non-dynamic code (w/o code context).
            A stub is created that makes appropriate conversions/boxing and calls the object.
            The stub should be executed within a context of this object's language.
            </summary>
            <returns>The delegate or a <c>null</c> reference if the object is not callable.</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.GetCombinedParameters(System.Object[],System.Object)">
            <summary>
            Helper function to combine an object array with a sequence of additional parameters that has been splatted for a function call.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Math.Complex64">
            <summary>
            Implementation of the complex number data type.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.CommandLine">
            <summary>
            Command line hosting service.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Run(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Hosting.Shell.IConsole,Microsoft.Scripting.Hosting.Shell.ConsoleOptions)">
            <summary>
            Executes the comand line - depending upon the options provided we will
            either run a single file, a single command, or enter the interactive loop.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Run">
            <summary>
            Runs the command line.  Languages can override this to provide custom behavior other than:
                1. Running a single command
                2. Running a file
                3. Entering the interactive console loop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunFile(Microsoft.Scripting.SourceUnit)">
            <summary>
            Runs the specified filename
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunInteractive">
            <summary>
            Starts the interactive loop.  Performs any initialization necessary before
            starting the loop and then calls RunInteractiveLoop to start the loop.
            
            Returns the exit code when the interactive loop is completed.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunInteractiveLoop">
            <summary>
            Runs the interactive loop.  Repeatedly parse and run interactive actions
            until an exit code is received.  If any exceptions are unhandled displays
            them to the console
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.TryInteractiveAction">
            <summary>
            Attempts to run a single interaction and handle any language-specific
            exceptions.  Base classes can override this and call the base implementation
            surrounded with their own exception handling.
            
            Returns null if successful and execution should continue, or an exit code.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunOneInteraction">
            <summary>
            Parses a single interactive command and executes it.  
            
            Returns null if successful and execution should continue, or the appropiate exit code.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.TreatAsBlankLine(System.String,System.Int32)">
            <summary>
            Private helper function to see if we should treat the current input as a blank link.
            
            We do this if we only have auto-indent text.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.ReadStatement(System.Boolean@)">
            <summary>
            Read a statement, which can potentially be a multiple-line statement suite (like a class declaration).
            </summary>
            <param name="continueInteraction">Should the console session continue, or did the user indicate 
            that it should be terminated?</param>
            <returns>Expression to evaluate. null for empty input</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.GetNextAutoIndentSize(System.String)">
            <summary>
            Gets the next level for auto-indentation
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.HostingHelpers">
            <summary>
            Advanced APIs for HAPI providers. These methods should not be used by hosts. 
            They are provided for other hosting API implementers that would like to leverage existing HAPI and 
            extend it with language specific functionality, for example. 
            
            Providers or something like that and move this class there to hide it from the ordinary hosts. 
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ParamsDictArgBuilder">
            <summary>
            Builds the parameter for a params dictionary argument - this collects all the extra name/value
            pairs provided to the function into a SymbolDictionary which is passed to the function.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.TokenizerService.ReadToken">
            <summary>
            Move the tokenizer past the next token and return its category.
            </summary>
            <returns>The token information associated with the token just scanned.</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenizerService.SkipToken">
            <summary>
            Move the tokenizer past the next token.
            </summary>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenizerService.ReadTokens(System.Int32)">
            <summary>
            Get all tokens over a block of the stream.
            </summary>
            <remarks>
            <para>
            The scanner should return full tokens. If startLocation + length lands in the middle of a token, the full token
            should be returned.
            </para>
            </remarks>
            <param name="countOfChars">The mininum number of characters to process while getting tokens.</param>
            <returns>A enumeration of tokens.</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenizerService.SkipTokens(System.Int32)">
            <summary>
            Scan from startLocation to at least startLocation + length.
            </summary>
            <param name="countOfChars">The mininum number of characters to process while getting tokens.</param>
            <remarks>
            This method is used to determine state at arbitrary startLocation.
            </remarks>
            <returns><c>False</c> if the end of stream has been reached, <c>true</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Scripting.TokenizerService.CurrentState">
            <summary>
            The current internal state of the scanner.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.TokenizerService.CurrentPosition">
            <summary>
            The current startLocation of the scanner.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpretation.InterpreterState.TemporaryStorage">
            <summary>
            Gets the current container for temporary variables. These might need to be nested in a manner
            different than the Scope objects, so separate functions exist for pushing and popping them relative
            to the current scope.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ParamDictionaryAttribute">
            <summary>
            This attribute is the dictionary equivalent of the System.ParamArrayAttribute.
            It is used to mark a parameter that can accept an arbitrary dictionary of
            name/value pairs for a method called with named arguments.  This parameter
            must be applied to a type that implements IDictionary(string, object) or
            IDictionary(SymbolId, object).
            
            For eg. in this Python method,
                def foo(**paramDict): print paramDict
                foo(a=1, b=2)
            paramDict will be {"a":1, "b":2}
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorListenerProxySink">
            <summary>
            Bridges ErrorSink and ErrorListener. 
            Errors reported by language compilers to ErrorSink are forwarded to the ErrorListener provided by the host.
            </summary>
            <remarks>
            This proxy is created in the scenario when the compiler is processing a single SourceUnit.
            Therefore it could maintain one to one mapping from SourceUnit to ScriptSource.
            In a case, which shouldn't happen, that the compiler reports an error in a different SourceUnit we just create 
            a new instance of the ScriptSource each time. 
            
            TODO: Consider compilation of multiple source units and creating a hashtable mapping SourceUnits to ScriptSources
            within the context of compilation unit.
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodTarget">
            <summary>
            MethodTarget represents how a method is bound to the arguments of the call-site
            
            Contrast this with MethodCandidate which represents the logical view of the invocation of a method
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodTarget.MakeExpression(Microsoft.Scripting.Actions.RuleBuilder,System.Collections.Generic.IList{Microsoft.Scripting.Ast.Expression},System.Collections.Generic.IList{System.Type})">
            <summary>
            Creates a call to this MethodTarget with the specified parameters.  Casts are inserted to force
            the types to the provided known types.
            </summary>
            <param name="rule">The rule being generated for the call</param>
            <param name="parameters">The explicit arguments</param>
            <param name="knownTypes">If non-null, the type for each element in parameters</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Scripting.Generation.KeywordConstructorReturnBuilder">
            <summary>
            Updates fields/properties of the returned value with unused keyword parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ReturnBuilder.#ctor(System.Type)">
            <summary>
            Creates a ReturnBuilder
            </summary>
            <param name="returnType">the type the ReturnBuilder will leave on the stack</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ReturnBuilder.Build(Microsoft.Scripting.Runtime.CodeContext,System.Object[],System.Object[],System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="args">The physical arguments being passed to the function</param>
            <param name="parameters">The arguments the user provided to call the function</param>
            <param name="ret">The return value of the function</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.InterpreterHelpers.ExecuteRule``1(Microsoft.Scripting.Actions.CallSiteBinder,System.Object[])">
            <summary>
            Used by interpreter to invoke the dynamic site via the action binder.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LocalsDictionary">
            <summary>
            Wraps ILocalVariables in a dictionary
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageBoundTextContentProvider">
            <summary>
            Internal class which binds a LanguageContext, StreamContentProvider, and Encoding together to produce
            a TextContentProvider which reads binary data with the correct language semantics.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Run(System.String[])">
            <summary>
            To be called from entry point.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ExeName">
            <summary>
            Console Host entry-point .exe name.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.HostOptions">
            <summary>
            Gets the ConsoleHostOptions so that languages can provide values from 
            their own command line parser.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ContextArgBuilder">
            <summary>
            ArgBuilder which provides the CodeContext parameter to a method.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.BindingResult">
            <summary>
            Indicates the specific type of failure, if any, from binding to a method.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.BindingResult.Success">
            <summary>
            The binding succeeded.  Only one method was applicable or had the best conversion.  
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.BindingResult.AmbigiousMatch">
            <summary>
            More than one method was applicable for the provided parameters and no method was considered the best.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.BindingResult.IncorrectArgumentCount">
            <summary>
            There are no overloads that match the number of parameters required for the call
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.BindingResult.CallFailure">
            <summary>
            None of the target method(s) can successfully be called.  The failure can be due to:
                1. Arguments could not be successfully converted for the call
                2. Keyword arguments could not be assigned to positional arguments
                3. Keyword arguments could be assigned but would result in an argument being assigned 
                   multiple times (keyword and positional arguments conflit or dupliate keyword arguments).
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.DeleteStatement">
            <summary>
            AST node representing deletion of the variable value.
            TODO: Python specific?
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`2">
            <summary>
            Dynamic site - arity 1
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`3">
            <summary>
            Dynamic site - arity 2
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`4">
            <summary>
            Dynamic site - arity 3
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`5">
            <summary>
            Dynamic site - arity 4
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`6">
            <summary>
            Dynamic site - arity 5
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`7">
            <summary>
            Dynamic site - arity 6
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`8">
            <summary>
            Dynamic site - arity 7
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSite`9">
            <summary>
            Dynamic site - arity 8
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DelegateInfo">
            <summary>
            Used as the value for the RuntimeHelpers.GetDelegate method caching system
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptScope">
             <summary>
             A ScriptScope is a unit of execution for code.  It consists of a global Scope which
             all code executes in.  A ScriptScope can have an arbitrary initializer and arbitrary
             reloader. 
             
             ScriptScope is not thread safe. Host should either lock when multiple threads could 
             access the same module or should make a copy for each thread.
            
             Hosting API counterpart for <see cref="P:Microsoft.Scripting.Hosting.ScriptScope.Scope"/>.
             </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.Execute(System.String)">
            <summary>
            Executes specified code against the scope using the engine of the language associated with the scope.
            </summary>
            <exception cref="T:System.NotSupportedException">No language is associated with the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.Execute``1(System.String)">
            <summary>
            Executes specified code against the scope using the engine of the language associated with the scope.
            Converts the result to the specified type using the conversion that the language associated with the scope defines.
            </summary>
            <exception cref="T:System.NotSupportedException">No language is associated with the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="code"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.IncludeFile(System.String)">
            <summary>
            Executes content of the specified physical file against the scope using the engine of the language associated with the scope.
            Converts the result to the specified type using the conversion that the language associated with the scope defines.
            </summary>
            <exception cref="T:System.NotSupportedException">No language is associated with the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariable(System.String)">
            <summary>
            Gets a value stored in the scope under the given name.
            </summary>
            <exception cref="T:System.MissingMemberException">The specified name is not defined in the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariable``1(System.String)">
            <summary>
            Gets a value stored in the scope under the given name.
            Converts the result to the specified type using the conversion that the language associated with the scope defines.
            If no language is associated with the scope, the default CLR conversion is attempted.
            </summary>
            <exception cref="T:System.MissingMemberException">The specified name is not defined in the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariable(System.String,System.Object@)">
            <summary>
            Tries to get a value stored in the scope under the given name.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.SetVariable(System.String,System.Object)">
            <summary>
            Sets the name to the specified value.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariableHandle(System.String)">
            <summary>
            Gets a handle for a value stored in the scope under the given name.
            </summary>
            <exception cref="T:System.MissingMemberException">The specified name is not defined in the scope.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariableHandle(System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            Tries to get a handle for a value stored in the scope under the given name.
            Returns <c>true</c> if there is such name, <c>false</c> otherwise. 
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.SetVariable(System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>
            Sets the name to the specified value.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The value held by the handle isn't from the scope's app-domain and isn't serializable or MarshalByRefObject.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="handle"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.ContainsVariable(System.String)">
            <summary>
            Determines if this context or any outer scope contains the defined name.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.RemoveVariable(System.String)">
            <summary>
            Removes the variable of the given name from this scope.
            </summary> 
            <returns><c>true</c> if the value existed in the scope before it has been removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.ClearVariables">
            <summary>
            Removes all values from the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptScope.Engine">
            <summary>
            Gets an engine for the langauge associated with this scope.
            Returns invariant engine if the scope is language agnostic.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptScope.VariableNames">
            <summary>
            Gets enumeration of variable names stored in the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptScope.Items">
            <summary>
            Gets enumeration of variable names and their values stored in the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Seek(System.Int32)">
            <summary>
            Sets the current position inside current token or one character behind it.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.SeekRelative(System.Int32)">
            <summary>
            Sets the current position inside current token or one character behind it.
            A relative displacement with respect to the current position in the token is specified.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkMultiLineTokenEnd">
            <summary>
            Marks token end. Enables to read the current token.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.DiscardToken">
            <summary>
            Marks token start. It means the buffer can drop the current token.
            Can be called even if no token has been read yet.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.ReadLine">
            <summary>
            Reads till the end of line and returns the character that stopped the reading.
            The returned character is not skipped.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.ResizeInternal(System.Char[]@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array to a speficied new size and copies a portion of the original array into its beginning.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.SetMemberBinderHelper`1.MakeOperatorSetMemberBody(System.Type,System.String)">
            <summary> if a member-injector is defined-on or registered-for this type call it </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ConvertToBinderHelper`1">
            <summary>
            BinderHelper for producing rules related to performing conversions.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryConvertToObject(System.Type,System.Type)">
            <summary>
            Checks if the conversion is to object and produces a target if it is.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryAllConversions(System.Type,System.Type)">
            <summary>
            Checks if any conversions are available and if so builds the target for that conversion.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryAssignableConversion(System.Type,System.Type)">
            <summary>
            Checks if the conversion can be handled by a simple cast.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryUserDefinedConversion(System.Type,System.Type)">
            <summary>
            Checks if the conversion can be handled by calling a user-defined conversion method.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryOneConversion(System.Type,System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            Helper that checkes both types to see if either one defines the specified conversion
            method.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryUserDefinedConversion(System.Type,System.Type,Microsoft.Scripting.Actions.MemberGroup,System.Boolean)">
            <summary>
            Checks if any of the members of the MemberGroup provide the applicable conversion and 
            if so uses it to build a conversion rule.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryExtensibleConversion(System.Type,System.Type)">
            <summary>
            Checks if the conversion is to applicable by extracting the value from Extensible of T.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryImplicitNumericConversion(System.Type,System.Type)">
            <summary>
            Checks if there's an implicit numeric conversion for primitive data types.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryNullableConversion(System.Type,System.Type)">
            <summary>
            Checks if there's a conversion to/from Nullable of T.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryEnumerableConversion(System.Type,System.Type)">
            <summary>
            Checks if there's a conversion to IEnumerator or IEnumerator of T via calling GetEnumerator
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryNullConversion(System.Type,System.Type)">
            <summary>
            Checks to see if there's a conversion of null to a reference type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryComConversion(System.Type,System.Type)">
            <summary>
            Checks to see if there's a conversion of System.__ComObject to an interface type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.TryExtraConversions(System.Type)">
            <summary>
            Checks for any extra conversions which aren't based upon the incoming type of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeErrorTarget">
            <summary>
            Helper to produce an error when a conversion cannot occur
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakePerfectMatchTarget">
            <summary>
            Helper to produce a rule when no conversion is required (the strong type of the expression
            input matches the type we're converting to)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeBoxingTarget">
            <summary>
            Helper to produce a rule which just boxes a value type
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeConversionTarget(Microsoft.Scripting.Actions.MethodTracker,System.Type,System.Boolean)">
            <summary>
            Helper to produce a conversion rule by calling the helper method to do the convert
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeExtensibleConversionTarget(Microsoft.Scripting.Actions.MethodTracker,System.Type,System.Boolean)">
            <summary>
            Helper to produce a conversion rule by calling the helper method to do the convert
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.WrapForThrowingTry(System.Boolean,Microsoft.Scripting.Ast.Expression)">
            <summary>
            Helper to wrap explicit conversion call into try/catch incase it throws an exception.  If
            it throws the default value is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeSimpleConversionTarget(System.Type)">
            <summary>
            Helper to produce a rule when no conversion is required (the strong type of the expression
            input matches the type we're converting to or has an implicit conversion at the IL level)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeSimpleExtensibleConversionTarget(System.Type)">
            <summary>
            Helper to produce a rule when no conversion is required from an extensible type's
            underlying storage to the type we're converting to.  The type of extensible type
            matches the type we're converting to or has an implicit conversion at the IL level.
            </summary>
            <param name="toType"></param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeExtensibleTarget(System.Type)">
            <summary>
            Helper to extract the value from an Extensible of T
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeNullToNullableOfTTarget(System.Type)">
            <summary>
            Helper to convert a null value to nullable of T
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeTToNullableOfTTarget(System.Type,System.Type)">
            <summary>
            Helper to produce the rule for converting T to Nullable of T
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeConvertingToTToNullableOfTTarget(System.Type)">
            <summary>
            Helper to produce the rule for converting T to Nullable of T
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.GetExtensibleValue(System.Type)">
            <summary>
            Helper to extract the Value of an Extensible of T from the
            expression being converted.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.GetUnderlyingType(System.Type)">
            <summary>
            Helper that checks if fromType is an Extensible of T or a subtype of 
            Extensible of T and if so returns the T.  Otherwise it returns fromType.
            
            This is used to treat extensible types the same as their underlying types.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeIEnumerableTarget(System.Type)">
            <summary>
            Makes a conversion target which converts IEnumerable -> IEnumerator
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeIEnumeratorOfTTarget(System.Type,System.Type)">
            <summary>
            Makes a conversion target which converts IEnumerable of T to IEnumerator of T
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeNullTarget(System.Type)">
            <summary>
            Creates a target which returns null for a reference type.
            </summary>
            <param name="toType"></param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConvertToBinderHelper`1.MakeDelegateTarget(System.Type)">
            <summary>
            Creates a target which creates a new dynamic method which contains a single
            dynamic site that invokes the callable object.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.StreamContentProvider">
            <summary>
            Provides a factory to create streams over one source of binary content.  
            
            StreamContentProvider's are used when opening a file of an unknown encoding.  The
            StreamContentProvider will be wrapped in a TextContentProvider provided by the language
            which can support a language specific way of interpreting the binary data into text. 
            
            For example some languages allow a marker at the beginning of the file which specifies
            the encoding of the rest of the file.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.StreamContentProvider.GetStream">
            <summary>
            Creates a new Stream which is backed by the content the StreamContentProvider was created for.
            
            For example if the StreamContentProvider was backing a file then GetStream re-opens the file and returns
            the new stream.
            
            This method may be called multiple times.  For example once to compile the code and again to get
            the source code to display error messages.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.Command">
            <summary>
            Literal script command given using -c option
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.FileName">
            <summary>
            Filename to execute passed on the command line options.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.PrintVersionAndExit">
            <summary>
            Only print the version of the script interpreter and exit
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpretation.LambdaInvoker">
            <summary>
            Helper class used by the interpreter to package lambda as a delegate,
            allow it being called, and then resume interpretation.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.LambdaInvoker.Invoke(System.Object[],System.Object[])">
            <summary>
            Triggers interpretation of the Lambda
            </summary>
            <param name="args">All arguments, except for the parameter array</param>
            <param name="array">Parameter array, if it was from the caller</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpretation.GeneratorLambdaInvoker.Invoke(Microsoft.Scripting.Runtime.Generator,System.Object@)">
            <summary>
            Triggers interpretation of the Lambda
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.InvariantContext">
            <summary>
            Singleton LanguageContext which represents a language-neutral LanguageContext
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._input">
            <summary>
            The console input buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._current">
            <summary>
            Current position - index into the input buffer
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._autoIndentSize">
            <summary>
            The number of white-spaces displayed for the auto-indenation of the current line
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._rendered">
            <summary>
            Length of the output currently rendered on screen.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._history">
            <summary>
            Command history
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._options">
            <summary>
            Tab options available in current context
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._cursor">
            <summary>
            Cursort anchor - position of cursor when the routine was called
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._commandLine">
            <summary>
            The command line that this console is attached to.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.SuperConsole.DisplayNextOption(System.ConsoleKeyInfo,System.Boolean)">
            <summary>
            Displays the next option in the option list,
            or beeps if no options available for current input prefix.
            If no input prefix, simply print tab.
            </summary>
            <param name="key"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.SuperConsole.OnEnter(System.Boolean)">
            <summary>
            Handle the enter key. Adds the current input (if not empty) to the history.
            </summary>
            <param name="inputChanged"></param>
            <returns>The input string.</returns>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole.History">
            <summary>
            Class managing the command history.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole.SuperConsoleOptions">
            <summary>
            List of available options
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole.Cursor">
            <summary>
            Cursor position management
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole.Cursor._anchorTop">
            <summary>
            Beginning position of the cursor - top coordinate.
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole.Cursor._anchorLeft">
            <summary>
            Beginning position of the cursor - left coordinate.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.TypeUtils.GetNumericConversionOrder(System.TypeCode,System.Int32@,System.Int32@)">
            <summary>
            Returns a numerical code of the size of a type.  All types get both a horizontal
            and vertical code.  Types that are lower in both dimensions have implicit conversions
            to types that are higher in both dimensions.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.Publisher`2">
            <summary>
            Thread safe dictionary that allows lazy-creation where readers will block for
            the creation of the lazily created value.  Call GetOrCreateValue w/ a key
            and a callback function.  If the value exists it is returned, if not the create
            callback is called (w/o any locks held).  The create call back will only be called
            once for each key.  
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.Publisher`2.PublishInfo`1">
            <summary>
            Helper class which stores the published value
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Math.BigInteger">
            <summary>
            arbitrary precision integers
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Math.BigInteger.Create(System.Byte[])">
            <summary>
            Create a BigInteger from a little-endian twos-complement byte array
            (inverse of ToByteArray())
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Math.BigInteger.GetBits">
            <summary>
            Return the magnitude of this BigInteger as an array of zero or more uints.
            Element zero is the value of the least significant four bytes, element one is
            the value of the four next most significant bytes, etc.
            
            The returned data is the unsigned magnitude of the number. To determine the sign,
            use GetSign().
            
            It is guaranteed that the highest element of the returned array is never zero.
            This means that if the value of this BigInteger is zero, a zero-length array
            is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Math.BigInteger.makeTwosComplement(System.UInt32[])">
            <summary>
            Do an in-place twos complement of d and also return the result.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Math.BigInteger.ToByteArray">
            <summary>
            Return the value of this BigInteger as a little-endian twos-complement
            byte array, using the fewest number of bytes possible. If the value is zero,
            return an array of one byte whose element is 0x00.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Math.BigInteger.Sign">
            <summary>
            Return the sign of this BigInteger: -1, 0, or 1.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ReturnReferenceArgBuilder">
            <summary>
            Builds a parameter for a reference argument when a StrongBox has not been provided.  The
            updated return value is returned as one of the resulting return values.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodSignatureInfo">
            <summary>
            Helper class to remove methods w/ identical signatures.  Used for GetDefaultMembers
            which returns members from all types in the hierarchy.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.KeywordArgBuilder">
            <summary>
            ArgBuilder which provides a value for a keyword argument.  
            
            The KeywordArgBuilder calculates its position at emit time using it's initial 
            offset within the keyword arguments, the number of keyword arguments, and the 
            total number of arguments provided by the user.  It then delegates to an 
            underlying ArgBuilder which only receives the single correct argument.
            
            Delaying the calculation of the position to emit time allows the method binding to be 
            done without knowing the exact the number of arguments provided by the user. Hence,
            the method binder can be dependent only on the set of method overloads and keyword names,
            but not the user arguments. While the number of user arguments could be determined
            upfront, the current MethodBinder does not have this design.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.KeywordArgBuilder.BuilderExpectsSingleParameter(Microsoft.Scripting.Generation.ArgBuilder)">
            <summary>
            The underlying builder should expect a single parameter as KeywordArgBuilder is responsible
            for calculating the correct parameter to use
            </summary>
            <param name="builder"></param>
        </member>
    </members>
</doc>
